{"file":"dnn-chevron.entry.esm.js","mappings":";;AAAA,MAAM,aAAa,GAAG,gXAAgX;;MCSzX,UAAU;EALvB;;;;IAQU,eAAU,GAAY,QAAQ,CAAC;;IAG/B,iBAAY,GAAY,UAAU,CAAC;;IAGL,aAAQ,GAAa,KAAK,CAAC;GAsBlE;EAhBC,qBAAqB,CAAC,QAAiB;IACrC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;GAC7B;EAED,MAAM;IACJ,QACE,EAAC,IAAI,QACH,4BAAoB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,UAAU,EACrE,OAAO,EAAE,MAAM,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,QAAQ,IAE7C,WAAK,KAAK,EAAC,4BAA4B,EAAC,MAAM,EAAC,MAAM,EAAC,OAAO,EAAC,WAAW,EAAC,KAAK,EAAC,MAAM,EAAC,IAAI,EAAC,SAAS,IAAC,YAAM,CAAC,EAAC,eAAe,EAAC,IAAI,EAAC,MAAM,GAAE,EAAA,YAAM,CAAC,EAAC,gDAAgD,GAAE,CAAM,CACpM,CACJ,EACP;GACH;;;;;;;;;","names":[],"sources":["./src/components/dnn-chevron/dnn-chevron.scss?tag=dnn-chevron&encapsulation=shadow","./src/components/dnn-chevron/dnn-chevron.tsx"],"sourcesContent":[":host {\n  display: inline-block;\n}\nbutton{\n  border: none;\n  padding: 0px;\n  margin: 0px;\n  min-width: 15px;\n  min-height: 15px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: transparent;\n  outline: none;\n}\nsvg{\n  height:2em;\n  width:2em;\n  transition: all 300ms ease-in-out;\n}\n\n// FOCUS\nbutton:focus, button:hover{\n  svg{\n    color: var(--dnn-color-primary);\n  }\n}\n\n// EXPANDED\n:host([expanded]){\n  svg{\n    transform: rotate(90deg);\n  }\n}","import { Component, Host, h, Prop, Event } from '@stencil/core';\nimport { EventEmitter } from '@stencil/core';\nimport { Watch } from '@stencil/core';\n\n@Component({\n  tag: 'dnn-chevron',\n  styleUrl: 'dnn-chevron.scss',\n  shadow: true\n})\nexport class DnnChevron {\n\n  /** Expand text for screen readers */\n  @Prop() expandText?: string = \"expand\";\n\n  /** Collapse text for screen readers */\n  @Prop() collapseText?: string = \"collapse\";\n\n  /** Is the chevron expanded */\n  @Prop({mutable: true, reflect: true}) expanded?: boolean = false;\n\n  /** Fires up when the expanded status changes */\n  @Event() changed: EventEmitter;\n\n  @Watch('expanded')\n  handleExpandedChanged(newValue: boolean) {\n    this.changed.emit(newValue);\n  }\n\n  render() {\n    return (\n      <Host>\n        <button aria-label={this.expanded ? this.collapseText : this.expandText}\n          onClick={() => this.expanded = !this.expanded}\n        >\n          <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 0 24 24\" width=\"24px\" fill=\"#000000\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"/></svg>\n        </button>\n      </Host>\n    );\n  }\n\n}\n"],"version":3}