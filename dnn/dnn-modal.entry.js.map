{"file":"dnn-modal.entry.esm.js","mappings":";;AAAA,MAAM,WAAW,GAAG,soCAAsoC;;MCO7oC,QAAQ;EALrB;;;;;;IAYU,oBAAe,GAAY,IAAI,CAAC;;;;;IAMhC,cAAS,GAAY,aAAa,CAAC;;;;;;IAOnC,oBAAe,GAAa,IAAI,CAAC;;;;IAKH,YAAO,GAAY,KAAK,CAAC;GA0DhE;;;;EApDC,MAAM,IAAI;IACR,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;GACrB;;;;EAMD,MAAM,IAAI;IACR,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;GACtB;EAOO,aAAa;IACnB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;IACrB,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;GACvB;EAEO,mBAAmB,CAAC,CAAa;IACvC,MAAM,OAAO,GAAI,CAAC,CAAC,MAAsB,CAAC;IAC1C,IAAI,OAAO,CAAC,EAAE,KAAK,UAAU,IAAI,IAAI,CAAC,eAAe,EAAC;MACpD,IAAI,CAAC,aAAa,EAAE,CAAC;KACtB;GACF;EAED,MAAM;IACJ,QACE,EAAC,IAAI,QACH,WAAK,EAAE,EAAC,UAAU,EAChB,KAAK,EAAE,IAAI,CAAC,OAAO,GAAG,iBAAiB,GAAG,SAAS,EACnD,OAAO,EAAE,CAAC,IAAI,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,IAEzC,WAAK,KAAK,EAAC,OAAO,IACf,IAAI,CAAC,eAAe;MACnB,cACE,KAAK,EAAC,OAAO,gBACD,IAAI,CAAC,SAAS,EAC1B,OAAO,EAAE,MAAM,IAAI,CAAC,aAAa,EAAE,IAEnC,WAAK,KAAK,EAAC,4BAA4B,EAAC,MAAM,EAAC,MAAM,EAAC,OAAO,EAAC,WAAW,EAAC,KAAK,EAAC,MAAM,EAAC,IAAI,EAAC,SAAS,IAAC,YAAM,CAAC,EAAC,eAAe,EAAC,IAAI,EAAC,MAAM,GAAE,EAAA,YAAM,CAAC,EAAC,iLAAiL,GAAE,CAAM,CACrU,EAEX,eAAa,CACT,CACF,CACD,EACP;GACH;;;;;;;","names":[],"sources":["./src/components/dnn-modal/dnn-modal.scss?tag=dnn-modal&encapsulation=shadow","./src/components/dnn-modal/dnn-modal.tsx"],"sourcesContent":[":host {\n  /**\n   * @prop --max-width: The maximum width of the module.\n  */\n  display: block;\n  .overlay{\n    background-color: rgba(0,0,0,0.5);\n    position: fixed;\n    top:0;\n    left:0;\n    width: 100%;\n    height: 100%;\n    z-index: 1002; // DNN default theme has menus on z-index 1001\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    backdrop-filter: blur(2px);\n    transition: all 300ms ease-in-out;\n    visibility: hidden;\n    opacity: 0;\n    .modal{\n      max-width: var(--max-width, 1200px);\n      background-color: white;\n      padding: 30px;\n      transform: scale(2);\n      transition: all 300ms ease-in-out;\n      z-index: 2;\n      position: relative;\n      margin: 10%;\n      max-height: 80%;\n      border-radius: var(--dnn-controls-radius, 5px);\n      box-shadow: 10px 10px 20px 0 rgba(0,0,0,0.5);\n      display: block;\n      .close{\n        position: absolute;\n        background-color:white;\n        border: 2px solid white;\n        border-radius: 50%;\n        padding: 0;\n        margin: 0;\n        top: -12px;\n        right: -12px;\n        outline: none;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        &:focus, &:hover{\n          box-shadow: 0 0 2px 2px var(--dnn-color-primary, blue);\n        }\n        svg{\n          width: 24px;\n          height: 24px;\n          color: grey;\n        }\n      }\n    }\n    &.visible{\n      visibility: visible;\n      opacity: 1;\n      .modal{\n        transform: scale(1);\n        box-shadow: 4px 4px 10px 0px rgba(0,0,0,0.5);\n        display: block;\n      }\n    }\n  }\n}","import { Component, Element, Host, h, Prop, Event, EventEmitter, Method } from '@stencil/core';\n\n@Component({\n  tag: 'dnn-modal',\n  styleUrl: 'dnn-modal.scss',\n  shadow: true\n})\nexport class DnnModal {\n  \n  @Element() el!: HTMLDnnModalElement;\n  \n  /**\n   * Pass false to remove the backdrop click auto-dismiss feature.\n   */\n  @Prop() backdropDismiss: boolean = true;\n\n  /**\n   * Optionally pass the aria-label text for the close button.\n   * Defaults to \"Close modal\" if not provided.\n   */\n  @Prop() closeText?: string = \"Close modal\";\n\n  /**\n   * Optionally you can pass false to not show the close button.\n   * If you decide to do so, you should either not also prevent dismissal by clicking the backdrop\n   * or provide your own dismissal logic in the modal content.\n   */\n  @Prop() showCloseButton?: boolean = true;\n\n  /**\n   * Reflects the visible state of the modal.\n   */\n  @Prop({mutable: true, reflect: true}) visible: boolean = false;\n\n  /**\n   * Shows the modal\n   */\n  @Method()\n  async show() {\n    this.visible = true;\n  }\n\n  /**\n   * Hides the modal\n   */\n  @Method()\n  async hide() {\n    this.visible = false;\n  }\n\n  /**\n   * Fires when the modal is dismissed.\n   */\n  @Event() dismissed!: EventEmitter;\n\n  private handleDismiss(){\n    this.visible = false;\n    this.dismissed.emit();\n  }\n\n  private handleBackdropClick(e: MouseEvent): void {\n    const element = (e.target as HTMLElement);\n    if (element.id === \"backdrop\" && this.backdropDismiss){\n      this.handleDismiss();\n    }\n  }\n\n  render() {\n    return (\n      <Host>\n        <div id=\"backdrop\"\n          class={this.visible ? 'overlay visible' : 'overlay'}\n          onClick={e => this.handleBackdropClick(e)}\n        >\n          <div class=\"modal\">\n            {this.showCloseButton &&\n              <button\n                class=\"close\"\n                aria-label={this.closeText}\n                onClick={() => this.handleDismiss()}\n              >\n                <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 0 24 24\" width=\"24px\" fill=\"#000000\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z\"/></svg>\n              </button>\n            }\n            <slot></slot>\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n"],"version":3}